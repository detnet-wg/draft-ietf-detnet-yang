<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" 
       docName="draft-ietf-detnet-yang-07" 
       ipr="trust200902"
        submissionType="IETF">
  <front>
    <title abbrev="draft-ietf-detnet-yang-07">Deterministic Networking
    (DetNet) Configuration YANG Model</title>

    <author fullname="Xuesong Geng" initials="X." surname="Geng">
      <organization>Huawei Technologies</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>gengxuesong@huawei.com</email>
      </address>
    </author>

    <author fullname="Mach(Guoyi) Chen" initials="M." surname="Chen">
      <organization>Huawei Technologies</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>mach.chen@huawei.com</email>
      </address>
    </author>

    <author fullname="Yeoncheol Ryoo" initials="Y." surname="Ryoo">
      <organization>ETRI</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>dbduscjf@etri.re.kr</email>

        <uri/>
      </address>
    </author>

    <author fullname="Don Fedyk" initials="D." surname="Fedyk">
      <organization>LabN Consulting, L.L.C.</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>dfedyk@labn.net</email>

        <uri/>
      </address>
    </author>


    <author fullname="Zhenqiang Li" initials="Z." surname="Li">
      <organization>China Mobile</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>lizhenqiang@chinamobile.com</email>
      </address>
    </author>

    <author fullname="Reshad Rahman" initials="R." surname="Rahman">
      <organization>Cisco Systems</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <region/>

          <code/>

          <country/>
        </postal>

        <phone/>

        <facsimile/>

        <email>rrahman@cisco.com</email>

        <uri/>
      </address>
    </author>


    <date />

    <abstract>
      <t>This document contains the specification for Deterministic Networking
      flow configuration YANG Model. The model allows for provisioning of
      end-to-end DetNet service along the path without dependency on any
      signaling protocol.</t>

      <t>The YANG module defined in this document conforms to the Network
      Management Datastore Architecture (NMDA).</t>
    </abstract>

    <note title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref>.</t>
    </note>
  </front>

  <middle>
    <section title="Introduction">
      <t>DetNet (Deterministic Networking) provides a capability to carry
      specified unicast or multicast data flows for real-time applications
      with extremely low packet loss rates and assured maximum end-to-end
      delivery latency. A description of the general background and concepts
      of DetNet can be found in <xref target="RFC8655"/>.</t>

      <t>This document defines a YANG model for DetNet based on YANG data
      types and modeling language defined in <xref target="RFC6991"/> and
      <xref target="RFC7950"/>. DetNet service, which is designed for
      describing the characteristics of services being provided for
      application flows over a network, and DetNet configuration, which is
      designed for DetNet flow path establishment, flow status reporting, and
      DetNet functions configuration in order to achieve end-to-end bounded
      latency and zero congestion loss, are both included in this
      document.</t>
    </section>

    <section title="Terminologies">
      <t>This documents uses the terminologies defined in <xref
      target="RFC8655"> </xref>.</t>
    </section>

    <section title="DetNet Configuration Module">
      <t>DetNet configuration module includes DetNet App-flow configuration,
      DetNet Service Sub-layer configuration, and DetNet Forwarding Sub-layer
      configuration. The corresponding attributes used in different sub-layers
      are defined in Section 3.1, 3.2, 3.3 respectively.</t>

      <section title="DetNet Appliction Flow Configuration Attributes">
        <t>DetNet application flow is responsible for mapping between
        application flows and DetNet flows at the edge node(egress/ingress
        node). Where the application flows can be either layer 2 or layer 3
        flows. To map a flow at the User Network Interface (UNI), the
        corresponding attributes are defined in <xref
        target="I-D.ietf-detnet-flow-information-model"/>.</t>
      </section>

      <section title="DetNet Service Sub-layer Configuration Attributes">
        <t>DetNet service functions, e.g., DetNet tunnel
        initialization/termination and service protection, are provided in
        DetNet service sub-layer. To support these functions, the following
        service attributes need to be configured:</t>

        <t><list style="symbols">
            <t>DetNet flow identification</t>

            <t>Service function indication, indicates which service function
            will be invoked at a DetNet edge, relay node or end station.
            (DetNet tunnel initialization or termination are default functions
            in DetNet service layer, so there is no need for explicit
            indication). The corresponding arguments for service functions
            also needs to be defined.</t>
          </list></t>
      </section>

      <section title="DetNet Forwarding Sub-layer Configuration Attributes">
        <t>As defined in <xref target="RFC8655"/>, DetNet forwarding sub-layer
        optionally provides congestion protection for DetNet flows over paths
        provided by the underlying network. Explicit route is another
        mechanism that is used by DetNet to avoid temporary interruptions
        caused by the convergence of routing or bridging protocols, and it is
        also implemented at the DetNet forwarding sub-layer.</t>

        <t>To support congestion protection and explicit route, the following
        transport layer related attributes are necessary:</t>

        <t><list style="symbols">
            <t>Traffic Specification, refers to Section 7.2 of <xref
            target="I-D.ietf-detnet-flow-information-model"/>. It may used for
            resource reservation, flow shaping, filtering and policing.</t>

            <t>Explicit path, existing explicit route mechanisms can be
            reused. For example, if Segment Routing (SR) tunnel is used as the
            transport tunnel, the configuration is mainly at the ingress node
            of the transport layer; if the static MPLS tunnel is used as the
            transport tunnel, the configurations need to be at every transit
            node along the path; for pure IP based transport tunnel, it's
            similar to the static MPLS case.</t>
          </list></t>
      </section>
    </section>
    <section title="DetNet Flow Aggregation">
      <t>
      DetNet provides the capability of flow aggregation to improve
      scaleability of DetNet data, management and control planes.  Aggregated
      flows can be viewed by the some DetNet nodes as individual DetNet flows.
      When aggregating DetNet flows, the flows should be compatible: if
      bandwidth reservations are used, the reservation should be a reasonable
      representation of  the individual reservations; if maximum delay bounds
      are used, the system should ensure that the aggregate does not exceed the
      delay bounds of the individual flows.
       </t>
       <t>
       The DetNet YANG model defined in this document supports DetNet flow
       aggregation with the following functions:
       </t>
        <t><list style="symbols">
       <t>
      Aggregation flow encapsulation/decapsulation/identification
       </t>
       <t>
      Mapping individual DetNet flows to an aggregated flow
       </t>
       <t>
      Changing traffic specification parameters for aggregated flow
       </t>
       </list></t>
       <t>
         The following cases of DetNet aggregation are supported:
       </t>
        <t><list style="symbols">
       <t>
       aggregate data flows into an application which is then mapped to a
       service sub-layer at the ingress node. Note the data flows may be other
       DetNet flows.  
       </t>
       <t>
       map each DetNet application to a single service sub-layer and allowing
       the aggregation of multiple applications at the ingress node, and vice
       versa for de-aggregation. A classifier may be required to de-aggregate
       the respective applications.  
       </t>
       <t>
       map each DetNet application uniquely to a single service sub-layer where
       those sub-layers may be encapsulated as a single service sub-layer and
       hence aggregating the applications at the ingress node, and vice versa
       for de-aggregation. A classifier may be required to de-aggregate the
       service sub-layers. 
       </t>
       <t>
       aggregate DetNet service sub-layers into an aggregated flow by using the
       same forwarding sub-layer at ingress node or relay node, and vice versa
       for de-aggregation.
       </t>
       <t>
       aggregate DetNet flows with different forwarding sub-layer into an
       aggregated flow by using the  same forwarding sub-layer at transit node,
       and vice versa for de-aggregation.
       </t>
       </list></t>
       <t>
       Traffic requirements and traffic specification may be tracked for
       individual or aggregate flows but reserving resources and tracking the
       services in the aggregated flow is out of scope.
       </t>
    </section>

    <section title="DetNet YANG Structure Considerations">
      <t/>

      <t>The picture shows that the general structure of the DetNet YANG
      Model:</t>

      <t><figure>
          <artwork><![CDATA[                  +-----------+
                  |ietf-detnet|
                  +-----+-----+
                        |
          +-------------+---------------+
          |             |               |   
    +-----+-----+ +-----+-----+ +-------+------+ 
    | App Flows | |service s-l| |forwarding s-l| 
    +-----------+ +-----------+ +--------------+ 
]]></artwork>
        </figure></t>

      <t>There are three instances in DetNet YANG Model: App-flow instance,
      service sub-layer instance and forwarding sub-layer instance,
      respectively corresponding to four parts of DetNet functions defined in
      section 3. </t>
    </section>

    <section title="DetNet Configuration YANG Structures">
      <t><figure>
          <artwork><![CDATA[module: ietf-detnet-config
module: ietf-detnet-config
  +--rw detnet
     +--rw traffic-profile* [profile-number]
     |  +--rw profile-number                 uint16
     |  +--rw traffic-requirements
     |  |  +--rw min-bandwidth?                    uint64
     |  |  +--rw max-latency?                      uint32
     |  |  +--rw max-latency-variation?            uint32
     |  |  +--rw max-loss?                         uint8
     |  |  +--rw max-consecutive-loss-tolerance?   uint32
     |  |  +--rw max-misordering?                  uint32
     |  +--rw traffic-specification
     |  |  +--rw interval?                       uint32
     |  |  +--rw max-packets-per-interval?       uint32
     |  |  +--rw max-payload-size?               uint32
     |  |  +--rw average-packets-per-interval?   uint32
     |  |  +--rw average-payload-size?           uint32
     |  +--ro member-applications*           app-flow-ref
     |  +--ro member-services*               service-sub-layer-ref
     |  +--ro member-groups*                 aggregation-grp-ref
     |  +--ro member-forwarding-sublayers*   forwarding-sub-layer-ref
     +--rw app-flows
     |  +--rw app-flow* [name]
     |     +--rw name                        string
     |     +--rw app-flow-bidir-congruent?   boolean
     |     +--ro outgoing-service?           service-sub-layer-ref
     |     +--ro incoming-service?           service-sub-layer-ref
     |     +--rw traffic-profile?            traffic-profile-ref
     |     +--rw ingress
     |     |  +--rw name?               string
     |     |  +--ro app-flow-status?    identityref
     |     |  +--rw interface?          if:interface-ref
     |     |  +--rw (data-flow-type)?
     |     |     +--:(tsn-app-flow)
     |     |     |  +--rw source-mac-address?        yang:mac-address
     |     |     |  +--rw destination-mac-address?   yang:mac-address
     |     |     |  +--rw ethertype?                 eth:ethertype
     |     |     |  +--rw vlan-id?                   uint16
     |     |     |  +--rw pcp?                       uint8
     |     |     +--:(ip-app-flow)
     |     |     |  +--rw src-ip-prefix?      inet:ip-prefix
     |     |     |  +--rw dest-ip-prefix?     inet:ip-prefix
     |     |     |  +--rw next-header?        uint8
     |     |     |  +--rw traffic-class?      uint8
     |     |     |  +--rw flow-label?         inet:ipv6-flow-label
     |     |     |  +--rw source-port
     |     |     |  |  +--rw (port-range-or-operator)?
     |     |     |  |     +--:(range)
     |     |     |  |     |  +--rw lower-port    inet:port-number
     |     |     |  |     |  +--rw upper-port    inet:port-number
     |     |     |  |     +--:(operator)
     |     |     |  |        +--rw operator?   packet-fields:operator
     |     |     |  |        +--rw port        inet:port-number
     |     |     |  +--rw destination-port
     |     |     |  |  +--rw (port-range-or-operator)?
     |     |     |  |     +--:(range)
     |     |     |  |     |  +--rw lower-port    inet:port-number
     |     |     |  |     |  +--rw upper-port    inet:port-number
     |     |     |  |     +--:(operator)
     |     |     |  |        +--rw operator?   packet-fields:operator
     |     |     |  |        +--rw port        inet:port-number
     |     |     |  +--rw ipsec-spi?          ipsec-spi
     |     |     +--:(mpls-app-flow)
     |     |        +--rw (label-space)?
     |     |           +--:(context-label-space)
     |     |           |  +--rw mpls-label-stack
     |     |           |     +--rw entry* [id]
     |     |           |        +--rw id               uint8
     |     |           |        +--rw label?
     |     |           |        |       rt-types:mpls-label
     |     |           |        +--rw ttl?             uint8
     |     |           |        +--rw traffic-class?   uint8
     |     |           +--:(platform-label-space)
     |     |              +--rw label?   rt-types:mpls-label
     |     +--rw egress
     |        +--rw name?                 string
     |        +--rw (application-type)?
     |           +--:(ethernet)
     |           |  +--rw ethernet
     |           |     +--rw ethernet-place-holder?   string
     |           +--:(ip-mpls)
     |              +--rw ip-mpls
     |                 +--rw (next-hop-options)
     |                    +--:(simple-next-hop)
     |                    |  +--rw outgoing-interface?
     |                    |  |       if:interface-ref
     |                    |  +--rw (flow-type)?
     |                    |     +--:(ip)
     |                    |     |  +--rw next-hop-address?
     |                    |     |          inet:ip-address
     |                    |     +--:(mpls)
     |                    |        +--rw mpls-label-stack
     |                    |           +--rw entry* [id]
     |                    |              +--rw id               uint8
     |                    |              +--rw label?
     |                    |              |       rt-types:mpls-label
     |                    |              +--rw ttl?             uint8
     |                    |              +--rw traffic-class?   uint8
     |                    +--:(next-hop-list)
     |                       +--rw next-hop-list
     |                          +--rw next-hop* [hop-index]
     |                             +--rw hop-index             uint8
     |                             +--rw outgoing-interface?
     |                             |       if:interface-ref
     |                             +--rw (flow-type)?
     |                                +--:(ip)
     |                                |  +--rw next-hop-address?
     |                                |          inet:ip-address
     |                                +--:(mpls)
     |                                   +--rw mpls-label-stack
     |                                      +--rw entry* [id]
     |                                         +--rw id
     |                                         |       uint8
     |                                         +--rw label?
     |                                         |       rt-types:
     |                                         |       mpls-label
     |                                         +--rw ttl?
     |                                         |       uint8
     |                                         +--rw traffic-class?
     |                                                 uint8
     +--rw service-aggregation-group* [group-name]
     |  +--rw group-name    aggregation-group
     |  +--rw outgoing
     |  |  +--rw traffic-profile?      traffic-profile-ref
     |  |  +--rw service-protection
     |  |  |  +--rw service-protection-type?   service-protection-type
     |  |  |  +--rw sequence-number-length?    sequence-number-field
     |  |  +--rw aggregation-header
     |  |  |  +--rw mpls-label-stack
     |  |  |     +--rw entry* [id]
     |  |  |        +--rw id               uint8
     |  |  |        +--rw label?           rt-types:mpls-label
     |  |  |        +--rw ttl?             uint8
     |  |  |        +--rw traffic-class?   uint8
     |  |  +--ro services*             service-sub-layer-ref
     |  +--rw incoming
     |     +--rw aggregation-header
     |     |  +--rw mpls-label-stack
     |     |     +--rw entry* [id]
     |     |        +--rw id               uint8
     |     |        +--rw label?           rt-types:mpls-label
     |     |        +--rw ttl?             uint8
     |     |        +--rw traffic-class?   uint8
     |     +--ro services*             service-sub-layer-ref
     +--rw service-sub-layer
     |  +--rw service-sub-layer-list* [name]
     |     +--rw name                      string
     |     +--rw service-rank?             uint8
     |     +--rw (service-type)
     |     |  +--:(non-grouped)
     |     |  |  +--rw non-grouped
     |     |  |     +--rw traffic-profile?          traffic-profile-ref
     |     |  |     +--rw service-operation-type?
     |     |  |             service-operation-type
     |     |  +--:(grouped)
     |     |     +--rw grouped
     |     |        +--rw group-ref?   aggregation-grp-ref
     |     +--rw service-protection
     |     |  +--rw service-protection-type?   service-protection-type
     |     |  +--rw sequence-number-length?    sequence-number-field
     |     +--rw service-operation-type?   service-operation-type
     |     +--rw incoming
     |     |  +--rw (incoming-options)
     |     |     +--:(ingress-application)
     |     |     |  +--rw app-flow*   app-flow-ref
     |     |     +--:(detnet-service-identification)
     |     |     |  +--rw (detnet-flow-type)?
     |     |     |     +--:(ip-detnet-flow)
     |     |     |     |  +--rw src-ip-prefix?      inet:ip-prefix
     |     |     |     |  +--rw dest-ip-prefix?     inet:ip-prefix
     |     |     |     |  +--rw next-header?        uint8
     |     |     |     |  +--rw traffic-class?      uint8
     |     |     |     |  +--rw flow-label?         inet:ipv6-flow-label
     |     |     |     |  +--rw source-port
     |     |     |     |  |  +--rw (port-range-or-operator)?
     |     |     |     |  |     +--:(range)
     |     |     |     |  |     |  +--rw lower-port    inet:port-number
     |     |     |     |  |     |  +--rw upper-port    inet:port-number
     |     |     |     |  |     +--:(operator)
     |     |     |     |  |        +--rw operator?
     |     |     |     |  |        |       packet-fields:operator
     |     |     |     |  |        +--rw port        inet:port-number
     |     |     |     |  +--rw destination-port
     |     |     |     |  |  +--rw (port-range-or-operator)?
     |     |     |     |  |     +--:(range)
     |     |     |     |  |     |  +--rw lower-port    inet:port-number
     |     |     |     |  |     |  +--rw upper-port    inet:port-number
     |     |     |     |  |     +--:(operator)
     |     |     |     |  |        +--rw operator?
     |     |     |     |  |        |       packet-fields:operator
     |     |     |     |  |        +--rw port        inet:port-number
     |     |     |     |  +--rw ipsec-spi?          ipsec-spi
     |     |     |     +--:(mpls-detnet-flow)
     |     |     |        +--rw (label-space)?
     |     |     |           +--:(context-label-space)
     |     |     |           |  +--rw mpls-label-stack
     |     |     |           |     +--rw entry* [id]
     |     |     |           |        +--rw id               uint8
     |     |     |           |        +--rw label?
     |     |     |           |        |       rt-types:mpls-label
     |     |     |           |        +--rw ttl?             uint8
     |     |     |           |        +--rw traffic-class?   uint8
     |     |     |           +--:(platform-label-space)
     |     |     |              +--rw label?   rt-types:mpls-label
     |     |     +--:(aggregated-service)
     |     |     |  +--rw service-sub-layer*   service-sub-layer-ref
     |     |     +--:(aggregated-forwarding)
     |     |        +--rw forwarding-sub-layer*
     |     |                forwarding-sub-layer-ref
     |     +--rw outgoing
     |        +--rw (outgoing-options)
     |           +--:(detnet-service-outgoing)
     |           |  +--rw service-outgoing-list*
     |           |          [service-outgoing-index]
     |           |     +--rw service-outgoing-index    uint8
     |           |     +--rw (header-type)?
     |           |     |  +--:(detnet-mpls-header)
     |           |     |  |  +--rw mpls-label-stack
     |           |     |  |     +--rw entry* [id]
     |           |     |  |        +--rw id               uint8
     |           |     |  |        +--rw label?
     |           |     |  |        |       rt-types:mpls-label
     |           |     |  |        +--rw ttl?             uint8
     |           |     |  |        +--rw traffic-class?   uint8
     |           |     |  +--:(detnet-ip-header)
     |           |     |     +--rw src-ip-address?     inet:ip-address
     |           |     |     +--rw dest-ip-address?    inet:ip-address
     |           |     |     +--rw next-header?        uint8
     |           |     |     +--rw traffic-class?      uint8
     |           |     |     +--rw flow-label?
     |           |     |     |       inet:ipv6-flow-label
     |           |     |     +--rw source-port?        inet:port-number
     |           |     |     +--rw destination-port?   inet:port-number
     |           |     +--rw next-layer* [index]
     |           |        +--rw index                   uint8
     |           |        +--rw forwarding-sub-layer?
     |           |                forwarding-sub-layer-ref
     |           +--:(detnet-service-aggregation)
     |           |  +--rw aggregation-service-sub-layer?
     |           |  |       service-sub-layer-ref
     |           |  +--rw service-label
     |           |     +--rw mpls-label-stack
     |           |        +--rw entry* [id]
     |           |           +--rw id               uint8
     |           |           +--rw label?           rt-types:mpls-label
     |           |           +--rw ttl?             uint8
     |           |           +--rw traffic-class?   uint8
     |           +--:(egress-proxy)
     |           |  +--rw app-flow*   app-flow-ref
     |           +--:(detnet-service-operation)
     |           |  +--rw service-sub-layer*   service-sub-layer-ref
     |           +--:(detnet-forwarding-operation)
     |              +--rw forwarding-sub-layer*
     |                      forwarding-sub-layer-ref
     +--rw forwarding-sub-layer
        +--rw forwarding-sub-layer-list* [name]
           +--rw name                         string
           +--rw traffic-profile?             traffic-profile-ref
           +--rw forwarding-operation-type?   forwarding-operations-type
           +--rw incoming
           |  +--rw (incoming-options)
           |     +--:(detnet-service-forwarding)
           |     |  +--ro service-sub-layer*   service-sub-layer-ref
           |     +--:(detnet-forwarding-identification)
           |     |  +--rw interface?            if:interface-ref
           |     |  +--rw (detnet-flow-type)?
           |     |     +--:(ip-detnet-flow)
           |     |     |  +--rw src-ip-prefix?      inet:ip-prefix
           |     |     |  +--rw dest-ip-prefix?     inet:ip-prefix
           |     |     |  +--rw next-header?        uint8
           |     |     |  +--rw traffic-class?      uint8
           |     |     |  +--rw flow-label?         inet:ipv6-flow-label
           |     |     |  +--rw source-port
           |     |     |  |  +--rw (port-range-or-operator)?
           |     |     |  |     +--:(range)
           |     |     |  |     |  +--rw lower-port    inet:port-number
           |     |     |  |     |  +--rw upper-port    inet:port-number
           |     |     |  |     +--:(operator)
           |     |     |  |        +--rw operator?
           |     |     |  |        |       packet-fields:operator
           |     |     |  |        +--rw port        inet:port-number
           |     |     |  +--rw destination-port
           |     |     |  |  +--rw (port-range-or-operator)?
           |     |     |  |     +--:(range)
           |     |     |  |     |  +--rw lower-port    inet:port-number
           |     |     |  |     |  +--rw upper-port    inet:port-number
           |     |     |  |     +--:(operator)
           |     |     |  |        +--rw operator?
           |     |     |  |        |       packet-fields:operator
           |     |     |  |        +--rw port        inet:port-number
           |     |     |  +--rw ipsec-spi?          ipsec-spi
           |     |     +--:(mpls-detnet-flow)
           |     |        +--rw (label-space)?
           |     |           +--:(context-label-space)
           |     |           |  +--rw mpls-label-stack
           |     |           |     +--rw entry* [id]
           |     |           |        +--rw id               uint8
           |     |           |        +--rw label?
           |     |           |        |       rt-types:mpls-label
           |     |           |        +--rw ttl?             uint8
           |     |           |        +--rw traffic-class?   uint8
           |     |           +--:(platform-label-space)
           |     |              +--rw label?   rt-types:mpls-label
           |     +--:(aggregated-forwarding)
           |        +--rw forwarding-sub-layer*
           |                forwarding-sub-layer-ref
           +--rw outgoing
              +--rw (outgoing-options)
                 +--:(detnet-forwarding-outgoing)
                 |  +--rw (next-hop-options)
                 |     +--:(simple-next-hop)
                 |     |  +--rw outgoing-interface?   if:interface-ref
                 |     |  +--rw (flow-type)?
                 |     |     +--:(ip)
                 |     |     |  +--rw (operation-type)?
                 |     |     |     +--:(ip-forwarding)
                 |     |     |     |  +--rw next-hop-address?
                 |     |     |     |          inet:ip-address
                 |     |     |     +--:(mpls-over-ip-encapsulation)
                 |     |     |        +--rw src-ip-address?
                 |     |     |        |       inet:ip-address
                 |     |     |        +--rw dest-ip-address?
                 |     |     |        |       inet:ip-address
                 |     |     |        +--rw next-header?        uint8
                 |     |     |        +--rw traffic-class?      uint8
                 |     |     |        +--rw flow-label?
                 |     |     |        |       inet:ipv6-flow-label
                 |     |     |        +--rw source-port?
                 |     |     |        |       inet:port-number
                 |     |     |        +--rw destination-port?
                 |     |     |                inet:port-number
                 |     |     +--:(mpls)
                 |     |        +--rw mpls-label-stack
                 |     |           +--rw entry* [id]
                 |     |              +--rw id               uint8
                 |     |              +--rw label?
                 |     |              |       rt-types:mpls-label
                 |     |              +--rw ttl?             uint8
                 |     |              +--rw traffic-class?   uint8
                 |     +--:(next-hop-list)
                 |        +--rw next-hop-list
                 |           +--rw next-hop* [hop-index]
                 |              +--rw hop-index             uint8
                 |              +--rw outgoing-interface?
                 |              |       if:interface-ref
                 |              +--rw (flow-type)?
                 |                 +--:(ip)
                 |                 |  +--rw (operation-type)?
                 |                 |     +--:(ip-forwarding)
                 |                 |     |  +--rw next-hop-address?
                 |                 |     |          inet:ip-address
                 |                 |     +--:(mpls-over-ip-
                 |                 |        | encapsulation)
                 |                 |        +--rw src-ip-address?
                 |                 |        |       inet:ip-address
                 |                 |        +--rw dest-ip-address?
                 |                 |        |       inet:ip-address
                 |                 |        +--rw next-header?
                 |                 |        |       uint8
                 |                 |        +--rw traffic-class?
                 |                 |        |       uint8
                 |                 |        +--rw flow-label?
                 |                 |        |       inet:ipv6-flow-label
                 |                 |        +--rw source-port?
                 |                 |        |       inet:port-number
                 |                 |        +--rw destination-port?
                 |                 |                inet:port-number
                 |                 +--:(mpls)
                 |                    +--rw mpls-label-stack
                 |                       +--rw entry* [id]
                 |                          +--rw id               uint8
                 |                          +--rw label?
                 |                          |       rt-types:mpls-label
                 |                          +--rw ttl?             uint8
                 |                          +--rw traffic-class?   uint8
                 +--:(detnet-service-aggregation)
                 |  +--rw aggregation-service-sub-layer?
                 |  |       service-sub-layer-ref
                 |  +--rw optional-forwarding-label
                 |     +--rw mpls-label-stack
                 |        +--rw entry* [id]
                 |           +--rw id               uint8
                 |           +--rw label?           rt-types:mpls-label
                 |           +--rw ttl?             uint8
                 |           +--rw traffic-class?   uint8
                 +--:(detnet-forwarding-aggregation)
                 |  +--rw aggregation-forwarding-sub-layer?
                 |  |       forwarding-sub-layer-ref
                 |  +--rw forwarding-label
                 |     +--rw mpls-label-stack
                 |        +--rw entry* [id]
                 |           +--rw id               uint8
                 |           +--rw label?           rt-types:mpls-label
                 |           +--rw ttl?             uint8
                 |           +--rw traffic-class?   uint8
                 +--:(detnet-service-operation)
                 |  +--rw service-sub-layer*   service-sub-layer-ref
                 +--:(detnet-forwarding-operation)
                    +--rw forwarding-sub-layer*
                            forwarding-sub-layer-ref
]]></artwork>
        </figure></t>
    </section>

    <section title="DetNet Configuration YANG Model">
      <t><figure>
          <artwork><![CDATA[<CODE BEGINS>
module ietf-detnet-config {
  namespace "urn:ietf:params:xml:ns:yang:ietf-detnet-config";
  prefix "ietf-detnet";

  import ietf-yang-types {
    prefix "yang";
  }

  import ietf-inet-types{
    prefix "inet";
  }

  import ietf-ethertypes {
    prefix "eth";
  }

  import ietf-routing-types {
    prefix "rt-types";
  }

  import ietf-packet-fields {
    prefix "packet-fields";
  }
  import ietf-interfaces {
    prefix "if";
  }

  organization
    "IETF DetNet Working Group";

  contact
    "WG Web:   <http://tools.ietf.org/wg/detnet/>
     WG List:  <mailto: detnet@ietf.org>
     WG Chair: Lou Berger
                 <mailto:lberger@labn.net>

                 Janos Farkas
                 <mailto:janos.farkas@ericsson.com>

     Editor:   Xuesong Geng
                <mailto:gengxuesong@huawei.com>

     Editor:   Mach Chen
                <mailto:mach.chen@huawei.com>

     Editor:   Zhenqiang Li
                <mailto:lizhenqiang@chinamobile.com>

     Editor:   Reshad Rahman
                <mailto:rrahman@cisco.com>

     Editor:   Yeoncheol Ryoo
                <mailto:dbduscjf@etri.re.kr>

     Editor:   Don Fedyk
                <mailto:dfedyk@labn.net>";

  description
    "This YANG module describes the parameters needed
     for DetNet flow configuration and flow status
     reporting";

  revision 2020-03-04 {
    description
      "initial revision";
    reference
      "RFC XXXX: draft-ietf-detnet-yang-02";
  }

  identity status {
    description
      "Base identity from which all application-status
       actions are derived";
  }

  identity none {
    base status;
    description
      "Application no ingress/egress";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }

  identity ready {
    base status;
    description
      "Application ingress/egress ready";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }

  identity failed {
    base status;
    description
      "Application ingres/egresss failed";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }

  identity out-of-service {
    base status;
    description
      "Application Administratively blocked";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }

  identity partial-failed {
    base status;
    description
      "Application One or more Egress ready, and one or more Egress
       failed.  The DetNet flow can be used if the Ingress is
       Ready.";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }

  typedef app-flow-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:app-flows"
         + "/ietf-detnet:app-flow"
         + "/ietf-detnet:name";
    }
  }

  typedef service-sub-layer-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:service-sub-layer"
         + "/ietf-detnet:service-sub-layer-list"
         + "/ietf-detnet:name";
    }
  }

  typedef forwarding-sub-layer-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:forwarding-sub-layer"
         + "/ietf-detnet:forwarding-sub-layer-list"
         + "/ietf-detnet:name";
    }
  }

  typedef aggregation-grp-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:service-aggregation-group"
         + "/ietf-detnet:group-name";
    }
  }

  typedef traffic-profile-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:traffic-profile"
         + "/ietf-detnet:profile-number";
    }
  }

  typedef ipsec-spi {
    type uint32 {
      range "1..max";
    }
    description
      "SPI";
  }

  typedef service-operation-type {
    type enumeration {
      enum service-initiation {
        description
          "Operation for DetNet service sub-layer encapsulation";
      }
      enum service-termination {
        description
          "Operation for DetNet service sub-layer decapsulation";
      }
      enum service-relay {
        description
          "Operation for DetNet service sub-layer swap";
      }
      enum non-detnet {
        description
          "No operation for DetNet service sub-layer";
      }
    }
  }

  typedef forwarding-operations-type {
    type enumeration {
      enum forward {
        description
          "Operation forward to next-hop";
      }
      enum impose-and-forward {
        description
          "Operation impose outgoing label(s) and forward to
           next-hop";
      }
      enum pop-and-forward {
        description
          "Operation pop incoming label and forward to next-hop";
      }
      enum pop-impose-and-forward {
        description
          "Operation pop incoming label, impose one or more
           outgoing label(s) and forward to next-hop";
      }
      enum swap-and-forward {
        description
          "Operation swap incoming label, with outgoing label and
           forward to next-hop";
      }
      enum pop-and-lookup {
        description
          "Operation pop incoming label and perform a lookup";
      }
    }
    description
      "MPLS operations types";
  }

  typedef service-protection-type {
    type enumeration {
      enum none {
        description
          "no service protection provide";
      }
      enum replication {
        description
          "A Packet Replication Function (PRF) replicates
           DetNet flow packets and forwards them to one or
           more next hops in the DetNet domain.  The number
           of packet copies sent to each next hop is a
           DetNet flow specific parameter at the node doing
           the replication.  PRF can be implemented by an
           edge node, a relay node, or an end system";
      }
      enum elimination {
        description
          "A Packet Elimination Function (PEF) eliminates
           duplicate copies of packets to prevent excess
           packets flooding the network or duplicate
           packets being sent out of the DetNet domain.
           PEF can be implemented by an edge node, a relay
           node, or an end system.";
      }
      enum ordering {
        description
          "A Packet Ordering Function (POF) re-orders
           packets within a DetNet flow that are received
           out of order.  This function can be implemented
           by an edge node, a relay node, or an end system.";
      }
      enum elimination-ordering {
        description
          "A combination of PEF and POF that can be
           implemented by an edge node, a relay node, or
           an end system.";
      }
      enum elimination-replication {
        description
          "A combination of PEF and PRF that can be
           implemented by an edge node, a relay node, or
           an end system";
      }
      enum elimination-ordering-replicaiton {
        description
          "A combination of PEF, POF and PRF that can be
           implemented by an edge node, a relay node, or
           an end system";
      }
    }
  }

  typedef sequence-number-generation-type {
    type enumeration {
      enum copy-from-app-flow {
        description
          "Copy the app-flow sequence number to the DetNet-flow";
      }
      enum generate-by-detnet-flow {
        description
          "Generate the sequence number by DetNet flow";
      }
    }
  }

  typedef sequence-number-field {
    type enumeration {
      enum zero-sn {
        description
          "there is no DetNet sequence number field.";
      }
      enum short-sn {
        value 16;
        description 
          "there is 16bit DetNet sequence number field";
      }
      enum long-sn {
        value 28;
        description
          "there is 28bit DetNet sequence number field";
      }
    }
  }

  typedef aggregation-group {
    type string;
    description
      "The name of the aggregation group";
  }

  grouping ip-header {
    description
      "The IPv4/IPv6 packet header information";
    leaf src-ip-address {
      type inet:ip-address;
      description
        "The source IP address of the header";
    }

    leaf dest-ip-address {
      type inet:ip-address;
      description
        "The destination IP address of the header";
    }

    leaf next-header {
      type uint8;
      description
        "The next header of the IPv6 header";
    }

    leaf traffic-class {
      type uint8;
      description
        "The traffic class value of the header";
    }

    leaf flow-label {
      type inet:ipv6-flow-label;
      description
        "The flow label value of the header";
    }

    leaf source-port {
      type inet:port-number;
      description
        "The source port number";
    }

    leaf destination-port {
      type inet:port-number;
      description
        "The destination port number";
    }
  }

  grouping l2-header {
    description
      "The Ethernet or TSN packet header information";
    leaf source-mac-address {
      type yang:mac-address;
      description
        "The source MAC address value of the ethernet header";
    }

    leaf destination-mac-address {
      type yang:mac-address;
      description
        "The destination MAC address value of the ethernet header";
    }

    leaf ethertype {
      type eth:ethertype;
      description
        "The ethernet packet type value of the ethernet header";
    }

    leaf vlan-id {
      type uint16;
      description
        "The Vlan value of the ethernet header";
    }

    leaf pcp {
      type uint8;
      description
        "The priority value of the ethernet header";
    }
  }

  grouping destination-ip-port-identification {
    description
      "The TCP/UDP port(source/destination) identification information";
    container destination-port {
      uses packet-fields:port-range-or-operator;
    }
  }

  grouping source-ip-port-identification {
    description
      "The TCP/UDP port(source/destination) identification information";
    container source-port {
      uses packet-fields:port-range-or-operator;
    }
  }

  grouping ip-flow-identification {
    description
      "The IPv4/IPv6 packet header identification information";
    leaf src-ip-prefix {
      type inet:ip-prefix;
      description
        "The source IP address of the header";
    }

    leaf dest-ip-prefix {
      type inet:ip-prefix;
      description
        "The destination IP address of the header";
    }

    leaf next-header {
      type uint8;
      description
        "The next header of the IPv6 header";
    }

    leaf traffic-class {
      type uint8;
      description
        "The traffic class value of the header";
    }

    leaf flow-label {
      type inet:ipv6-flow-label;
      description
        "The flow label value of the header";
    }

    uses source-ip-port-identification;

    uses destination-ip-port-identification;

    leaf ipsec-spi {
      type ipsec-spi;
      description
        "Security parameter index of SA entry";
    }
  }

  grouping mpls-flow-identification {
    description
      "The MPLS packet header identification information";
    choice label-space {
      description
        "";
      case context-label-space {
        uses rt-types:mpls-label-stack;
      }

      case platform-label-space {
        leaf label {
          type rt-types:mpls-label;
        }
      }
    }
  }

  grouping traffic-specification {
    container traffic-specification {
      description
        "traffic-specification specifies how the Source
         transmits packets for the flow.  This is the
         promise/request of the Source to the network.
         The network uses this traffic specification
         to allocate resources and adjust queue
         parameters in network nodes.";
      reference
        "draft-ietf-detnet-flow-information-model";
      leaf interval {
        type uint32;
        description
          "The period of time in which the traffic
           specification cannot be exceeded";
      }

      leaf max-packets-per-interval {
        type uint32;
        description
          "The maximum number of packets that the
           source will transmit in one Interval.";
      }

      leaf max-payload-size {
        type uint32;
        description
          "The maximum payload size that the source
           will transmit.";
      }

      leaf average-packets-per-interval {
        type uint32;
        description
          "The average number of packets that the
           source will transmit in one Interval";
      }

      leaf average-payload-size {
        type uint32;
        description
          "The average payload size that the
           source will transmit.";
      }
    }
  }

  grouping traffic-requirements {
    container traffic-requirements {
      description
        "FlowRequirements: defines the attributes of the App-flow
         regarding bandwidth, latency, latency variation, loss, and
         misordering tolerance.";
      leaf min-bandwidth {
        type uint64;
        description
          "MinBandwidth is the minimum bandwidth that has to be
           guaranteed for the DetNet service.  MinBandwidth is
           specified in octets per second.";
      }

      leaf max-latency {
        type uint32;
        description
          "MaxLatency is the maximum latency from Ingress to Egress(es)
           for a single packet of the DetNet flow.  MaxLatency is
           specified as an integer number of nanoseconds";
      }

      leaf max-latency-variation {
        type uint32;
        description
          "MaxLatencyVariation is the difference between the minimum and
           the maximum end-to-end one-way latency.  MaxLatencyVariation
           is specified as an integer number of nanoseconds.";
      }

      leaf max-loss {
        type uint8;
        description
          "MaxLoss defines the maximum Packet Loss Ratio (PLR) parameter
           for the DetNet service between the Ingress and Egress(es) of
           the DetNet domain.";
      }

      leaf max-consecutive-loss-tolerance {
        type uint32;
        description
          "Some applications have special loss requirement, such as
           MaxConsecutiveLossTolerance.  The maximum consecutive loss
           tolerance parameter describes the maximum number of
           consecutive packets whose loss can be tolerated.  The maximum
           consecutive loss tolerance can be measured for example based
           on sequence number";
      }

      leaf max-misordering {
        type uint32;
        description
          "MaxMisordering describes the tolerable maximum number of
           packets that can be received out of order.  The maximum
           allowed misordering can be measured for example based on
           sequence number.  The value zero for the maximum allowed
           misordering indicates that in order delivery is required,
           misordering cannot be tolerated.";
      }
    }
  }

  grouping data-flow-spec {
    description
      "app-flow identification";
    choice data-flow-type {
      case tsn-app-flow {
        uses l2-header;
      }

      case ip-app-flow {
        uses ip-flow-identification;
      }

      case mpls-app-flow {
        uses mpls-flow-identification;
      }
    }
  }

  grouping detnet-flow-spec {
    description 
      "detnet-flow identification";
    choice detnet-flow-type {
      case ip-detnet-flow {
        uses ip-flow-identification;
      }

      case mpls-detnet-flow {
        uses mpls-flow-identification;
      }
    }
  }

  grouping app-flows-ref {
    description
      "incoming or outgoing app-flow reference group";
    leaf-list app-flow {
      type app-flow-ref;
      description
        "List of ingress or egress app-flows";
    }
  }

  grouping service-sub-layer-ref {
    description
      "incoming or outgoing service sub-layer reference group";
    leaf-list service-sub-layer {
      type service-sub-layer-ref;
      description
        "List of incoming or outgoing service sub-layer
         that has to aggregate or disaggregate";
    }
  }

  grouping forwarding-sub-layer-ref {
    description
      "incoming or outgoing forwarding sub-layer reference group";
    leaf-list forwarding-sub-layer {
      type forwarding-sub-layer-ref;
      description
        "List of incoming or outgoing forwarding sub-layer
         that has to aggregate or disaggregate";
    }
  }

  grouping detnet-header {
    description
      "DetNet header info for DetNet encapsulation or swap";
    choice header-type {:
      case detnet-mpls-header {
        description
        "MPLS label stack for DetNet MPLS encapsulation 
         for forwarding";
        uses rt-types:mpls-label-stack;
      }

      case detnet-ip-header {
        description
          "IPv4/IPv6 packet header for DetNet IP encapsulation";
        uses ip-header;
      }
    }
  }

  grouping aggregation-header {
    description
      "DetNet aggregation header  DetNet encapsulation";
    container aggregation-header {
      description
        "MPLS label stack for DetNet MPLS encapsulation or
         forwarding";
      uses rt-types:mpls-label-stack;
    }
  }

  grouping detnet-app-next-hop-content {
    description
      "Generic parameters of DetNet next hops.";
    choice next-hop-options {
      mandatory true;
      description
        "Options for next hops.
         It is expected that further cases will be added through
         augments from other modules, e.g., for recursive
         next hops.";
      case simple-next-hop {
        description
          "This case represents a simple next hop consisting of the
           next-hop address and/or outgoing interface.
           Modules for address families MUST augment this case with a
           leaf containing a next-hop address of that address
           family.";
        leaf outgoing-interface {
          type if:interface-ref;
        }

        choice flow-type {
          case ip {
            leaf next-hop-address {
              type inet:ip-address;
            }
          }

          case mpls {
            uses rt-types:mpls-label-stack;
          }
        }
      }

      case next-hop-list {
        container next-hop-list {
          description
            "Container for multiple next hops.";
          list next-hop {
            key "hop-index";
            description
              "An entry in a next-hop list.
               Modules for address families MUST augment this list
               with a leaf containing a next-hop address of that
               address family.";
            leaf hop-index {
              type uint8;
              description
                "";
            }

            leaf outgoing-interface {
              type if:interface-ref;
            }

            choice flow-type {
              case ip {
                leaf next-hop-address {
                  type inet:ip-address;
                }
              }

              case mpls {
                uses rt-types:mpls-label-stack;
              }
            }
          }
        }
      }
    }
  }

  grouping detnet-forwarding-next-hop-content {
    description
      "Generic parameters of DetNet next hops.";
    choice next-hop-options {
      mandatory true;
      description
        "Options for next hops.
         It is expected that further cases will be added through
         augments from other modules, e.g., for recursive
         next hops.";
      case simple-next-hop {
        description
          "This case represents a simple next hop consisting of the
           next-hop address and/or outgoing interface.
           Modules for address families MUST augment this case with a
           leaf containing a next-hop address of that address
           family.";
        leaf outgoing-interface {
          type if:interface-ref;
        }

        choice flow-type {
          case ip {
            choice operation-type {
              case ip-forwarding {
                leaf next-hop-address {
                  type inet:ip-address;
                }
              }

              case mpls-over-ip-encapsulation {
                uses ip-header;
              }
            }
          }

          case mpls {
            uses rt-types:mpls-label-stack;
          }
        }
      }

      case next-hop-list {
        container next-hop-list {
          description
            "Container for multiple next hops.";
          list next-hop {
            key "hop-index";
            description
              "An entry in a next-hop list.

               Modules for address families MUST augment this list
               with a leaf containing a next-hop address of that
               address family.";
            leaf hop-index {
              type uint8;
              description
                "";
            }

            leaf outgoing-interface {
              type if:interface-ref;
            }

            choice flow-type {
              case ip {
                choice operation-type {
                  case ip-forwarding {
                    leaf next-hop-address {
                      type inet:ip-address;
                    }
                  }

                  case mpls-over-ip-encapsulation {
                    uses ip-header;
                  }
                }
              }

              case mpls {
                uses rt-types:mpls-label-stack;
              }
            }
          }
        }
      }
    }
  }

  container detnet {
    list traffic-profile {
      key "profile-number";
      description
        "A traffic profile";
      leaf profile-number {
        type uint16;
        description
          "An Aggregation group ID. Zero means the service is not
           part of a group";
      }

      uses traffic-requirements;

      uses traffic-specification;

      leaf-list member-applications {
        type app-flow-ref;
        config false;
        description
          "Applicaions attached to this profile";
      }

      leaf-list member-services {
        type service-sub-layer-ref;
        config false;
        description
          "Services attached to this profile";
      }

      leaf-list member-groups {
        type aggregation-grp-ref;
        config false;
        description
          "Groups attached to this profile";
      }

      leaf-list member-forwarding-sublayers {
        type forwarding-sub-layer-ref;
        config false;
        description
          "Forwarding sub-layer attached to this profile";
      }
    }

    container app-flows {
      description
        "The DetNet app-flow configuration";
      list app-flow {
        key "name";
        description
          "";
        leaf name {
          type "string";
          description
            "The name to identify the DetNet app-flow";
        }

        leaf app-flow-bidir-congruent {
          type boolean;
          description
            "Defines the data path requirement of the App-flow whether
             it must share the same data path and physical path
             for both directions through the network,
             e.g., to provide congruent paths in the two directions.";
        }

        leaf outgoing-service {
          type service-sub-layer-ref;
          config false;
          description
            "Binding to this applications outgoing
             service";
        }

        leaf incoming-service {
          type service-sub-layer-ref;
          config false;
          description
            "Binding to this applications incoming
             service";
        }

        leaf traffic-profile {
          type traffic-profile-ref;
          description
            "The Traffic Profile for this group";
        }

        container ingress {
          // key "name";  This should be a list for aggregation
          description
            "Ingress DetNet application flows or a compound flow";
          leaf name {
            type string;
            description
              "Ingress DetNet application";
          }

          leaf app-flow-status {
            type identityref {
              base status;
            }
            config false;
            description
              "Status of ingress application flow";
          }

          leaf interface {
            type if:interface-ref;
          }

          uses data-flow-spec;
        } //End of app-ingress

        container egress {
          description
            "Route's next-hop attribute.";
          // key "name";  This should be a list for aggregation
          leaf name {
            type string;
            description
              "Egress DetNet application";
          }

          choice application-type {
            container ethernet {
              leaf ethernet-place-holder {
                type string;
                description
                  "Place holder for matching ethernet";
              }
            }

            container ip-mpls {
              uses detnet-app-next-hop-content;
            }
          }
        }
      }
    }

    list service-aggregation-group {
      key "group-name";
      description
        "A group of services";
      leaf group-name {
        type aggregation-group;
        description
          "An Aggregation group name. Empty means the service is not
           part of a group";
      }

      container outgoing {
        leaf traffic-profile {
          type traffic-profile-ref;
          description
            "The Traffic Profile for this group";
        }

        container service-protection {
          leaf service-protection-type {
            type service-protection-type;
            description
              "The DetNet service protection type such as PRF, PEF,
               PEOF,PERF, and PEORF";
          }

          leaf sequence-number-length {
            type sequence-number-field;
            description
              "Sequence number filed can choice 0 bit, 16bit, 28 bit
               filed";
            }
          }

        uses aggregation-header;

        leaf-list services {
          type service-sub-layer-ref;
          config false;
          description
            "List of registered services";
        }
      }

      container incoming {
        uses aggregation-header;

        leaf-list services {
          type service-sub-layer-ref;
          config false;
          description
            "List of registered services";
        }
      }
    }

    container service-sub-layer {
      description
        "The DetNet service sub-layer configuration";
      list service-sub-layer-list {
        key "name";
        description
          "";
        leaf name {
          type string;
          description
            "The name of the DetNet service sub-layer";
        }

        leaf service-rank {
          type uint8;
          description
            "The DetNet rank for this service";
        }

        choice service-type {
          mandatory true;
          container non-grouped {
            leaf traffic-profile {
              type traffic-profile-ref;
              description
                "The Traffic Profile for this service";
            }

            leaf service-operation-type {
              type service-operation-type;
            }
          }

          container grouped {
            leaf group-ref {
              type aggregation-grp-ref;
              description
                "The aggregation group this service belongs to";
            }
          }
        }

        container service-protection {
          leaf service-protection-type {
            type service-protection-type;
            description
              "The DetNet service protection type such as PRF, PEF,
               PEOF,PERF, and PEORF";
          }

          leaf sequence-number-length {
            type sequence-number-field;
            description
              "Sequence number field can choice 0 bit, 16bit, 28 bit
               filed";
          }
        }

        leaf service-operation-type {
          type service-operation-type;
        }

        container incoming {
          description
            "The DetNet service sub-layer incoming configuration.";
          choice incoming-options {
            mandatory true;
            description
              "";
            case ingress-application {
              uses app-flows-ref;
            }

            case detnet-service-identification {
              uses detnet-flow-spec;
            }

            case aggregated-service {
              uses service-sub-layer-ref;
            }

            case aggregated-forwarding {
              uses forwarding-sub-layer-ref;
            }
          }
        }

        container outgoing {
          description
            "The DetNet service sub-layer outgoing configuration.";
          choice outgoing-options {
            mandatory true;
            description
              "";
            case detnet-service-outgoing {
              //uses detnet-service-next-hop-content;
              list service-outgoing-list {
                key "service-outgoing-index";
                leaf service-outgoing-index {
                  type uint8;
                }

                uses detnet-header;

                list next-layer {
                  key "index";
                  description
                    "lower-layer info";
                  leaf index {
                    type uint8;
                  }

                  leaf forwarding-sub-layer {
                    type forwarding-sub-layer-ref;
                  }
                }
              }
            }

            case detnet-service-aggregation {
              leaf aggregation-service-sub-layer {
                type service-sub-layer-ref;
              }

              container service-label {
                uses rt-types:mpls-label-stack;
              }
            }

            case egress-proxy {
              uses app-flows-ref;
            }

            case detnet-service-operation {
              uses service-sub-layer-ref;
            }

            case detnet-forwarding-operation {
              uses forwarding-sub-layer-ref;
            }
          }
        }
      }
    }

    container forwarding-sub-layer {
      description
        "The DetNet forwarding sub-layer configuration";
      list forwarding-sub-layer-list {
        key "name";
        description
          "";
        leaf name {
          type string;
          description
            "The name of the DetNet forwarding sub-layer";
        }

        leaf traffic-profile {
          type traffic-profile-ref;
          description
            "The Traffic Profile for this group";
        }

        leaf forwarding-operation-type {
          type forwarding-operations-type;
        }

        container incoming {
          description
            "The DetNet forwarding sub-layer incoming configuration.";
          choice incoming-options {
            mandatory true;
            description
              "";
            case detnet-service-forwarding {
              leaf-list service-sub-layer {
                type service-sub-layer-ref;
                config false;
                description
                  "";
              }
            }

            case detnet-forwarding-identification {
              leaf interface {
                type if:interface-ref;
                description
                  "";
              }

              uses detnet-flow-spec;
            }

            case aggregated-forwarding {
              uses forwarding-sub-layer-ref;
            }
          }
        }

        container outgoing {
          description
            "The DetNet forwarding sub-layer outbound configuration.";
          choice outgoing-options {
            mandatory true;
            description
              "";
            case detnet-forwarding-outgoing {
              uses detnet-forwarding-next-hop-content;
            }

            case detnet-service-aggregation {
              leaf aggregation-service-sub-layer {
                type service-sub-layer-ref;
              }

              container optional-forwarding-label {
                uses rt-types:mpls-label-stack;
              }
            }

            case detnet-forwarding-aggregation {
              leaf aggregation-forwarding-sub-layer {
                type forwarding-sub-layer-ref;
              }

              container forwarding-label {
                uses rt-types:mpls-label-stack;
              }
            }

            case detnet-service-operation {
              uses service-sub-layer-ref;
            }

            case detnet-forwarding-operation {
              uses forwarding-sub-layer-ref;
            }
          }
        }
      }
    }
  }
}
<CODE ENDS>
]]></artwork>
        </figure></t>
    </section>


    <section title="Open Issues">
      <t>There are some open issues that are still under discussion:</t>

      <t><list style="symbols">
          <t> Aggregation.</t>

          <t> Going along the the updated data plane model.</t>

          <t> Terminologies.</t>
        </list>These issues will be resolved in the following versions of the
      draft.</t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This document makes no request of IANA.</t>

      <t>Note to RFC Editor: this section may be removed on publication as an
      RFC.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>&lt;TBD&gt;</t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t/>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.8655'?>

    </references>
    <references title="Informative References">

      <?rfc include='reference.I-D.ietf-detnet-flow-information-model'?>

    </references>

  </back>
</rfc>
