Hi all,

Below are my comments <RR> inline in the model.

Regards,
Reshad.

module ietf-detnet-config {
<RR1> Shouldn’t the module be ietf-detnet?
<Done>

  namespace "urn:ietf:params:xml:ns:yang:ietf-detnet-config";
  prefix "ietf-detnet";
 
  import ietf-yang-types {
    prefix "yang";
<RR2>Add references for all imports (RFC8407)
<Done>
  }
 
  import ietf-inet-types{
    prefix "inet";
  }
 
  import ietf-ethertypes {
    prefix "eth";
<RR3> That module specifies its prefix as ethertypes
<Done>
  }
 
  import ietf-routing-types {
    prefix "rt-types";
  }
 
  import ietf-packet-fields {
    prefix "packet-fields";
  }
  import ietf-interfaces {
    prefix "if";
  }
 
  organization
    "IETF DetNet Working Group";
 
  contact
    "WG Web:   <http://tools.ietf.org/wg/detnet/>
     WG List:  <mailto: detnet@ietf.org>
     WG Chair: Lou Berger
                 <mailto:lberger@labn.net>
 
                 Janos Farkas
                 <mailto:janos.farkas@ericsson.com>
 <RR4> WG chairs are not in the template anymore.
<Done>

     Editor:   Xuesong Geng
                <mailto:gengxuesong@huawei.com>
 
     Editor:   Mach Chen
                <mailto:mach.chen@huawei.com>
 
     Editor:   Yeoncheol Ryoo
                <mailto:dbduscjf@etri.re.kr>
 
     Editor:   Don Fedyk
                <mailto:dfedyk@labn.net>;
 
     Editor:   Reshad Rahman
                <mailto:rrahman@cisco.com>
 
     Editor:   Zhenqiang Li
                <mailto:lizhenqiang@chinamobile.com>";
 
  description
    "This YANG module describes the parameters needed
     for DetNet flow configuration and flow status
     reporting";
 
  revision 2020-03-04 {
    description
      "initial revision";
    reference
      "RFC XXXX: draft-ietf-detnet-yang-02";
  }
 
  identity status {
<RR5>Since this is for application-status, I think “app-status” would be better for the base identity and “app-status” can be prefixed into the derived identities.
<Done>
    description
      "Base identity from which all application-status
       actions are derived";
  }
 
  identity none {
<RR6> app-status-none. Same comments for all app statuses below.
<Reject>
    base status;
    description
      "Application no ingress/egress";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }
 
  identity ready {
    base status;
    description
      "Application ingress/egress ready";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }
 
  identity failed {
    base status;
    description
      "Application ingres/egresss failed";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }
 
  identity out-of-service {
    base status;
    description
      "Application Administratively blocked";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }
 
  identity partial-failed {
    base status;
    description
      "Application One or more Egress ready, and one or more Egress
       failed.  The DetNet flow can be used if the Ingress is
       Ready.";
    reference
      "draft-ietf-detnet-flow-information-model-06 Section 5.8";
  }
 
  typedef app-flow-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:app-flows"
         + "/ietf-detnet:app-flow"
         + "/ietf-detnet:name";
    }
  }
 
  typedef service-sub-layer-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:service-sub-layer"
         + "/ietf-detnet:service-sub-layer-list"
         + "/ietf-detnet:name";
    }
  }
 
  typedef forwarding-sub-layer-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:forwarding-sub-layer"
         + "/ietf-detnet:forwarding-sub-layer-list"
         + "/ietf-detnet:name";
    }
  }
 
  typedef traffic-profile-ref {
    type leafref {
      path "/ietf-detnet:detnet"
         + "/ietf-detnet:traffic-profile"
         + "/ietf-detnet:profile-number";
    }
  }
 
  typedef ipsec-spi {
    type uint32 {
      range "1..max";
    }
    description
      "SPI";
<RR7> Enhance description and add reference.
<Done>
  }
 
  typedef service-operation-type {
    type enumeration {
      enum service-initiation {
        description
          "Operation for DetNet service sub-layer encapsulation";
      }
      enum service-termination {
        description
          "Operation for DetNet service sub-layer decapsulation";
      }
      enum service-relay {
        description
          "Operation for DetNet service sub-layer swap";
      }
      enum non-detnet {
        description
          "No operation for DetNet service sub-layer";
      }
    }
  }
 
  typedef forwarding-operations-type {
    type enumeration {
<RR8>Was identity, instead of enum, considered? Or no new functionality expected here?
<Comment> This is from MPLS  A YANG Data Model for MPLS Base draft-ietf-mpls-base-yang   
Aligned to match MPLS enum. 

      enum forward {           
        description            
          "Operation forward to next-hop";
      }
      enum impose-and-forward {
        description
          "Operation impose outgoing label(s) and forward to
           next-hop";
      }
      enum pop-and-forward {
        description
          "Operation pop incoming label and forward to next-hop";
      }
      enum pop-impose-and-forward {
        description
          "Operation pop incoming label, impose one or more
           outgoing label(s) and forward to next-hop";
      }
      enum swap-and-forward {
        description
          "Operation swap incoming label, with outgoing label and
           forward to next-hop";
      }
      enum pop-and-lookup {
        description
          "Operation pop incoming label and perform a lookup";
      }
    }
<RR9>Could/should these enum values be defined in an MPLS YANG model?
<Comment> We did not want to be dependent on MPLS and we added values. 
    description
      "MPLS operations types";
  }
 
  typedef service-protection-type {
    type enumeration {
      enum none {
        description
          "no service protection provide";
      }
      enum replication {
        description
          "A Packet Replication Function (PRF) replicates
           DetNet flow packets and forwards them to one or
           more next hops in the DetNet domain.  The number
           of packet copies sent to each next hop is a
           DetNet flow specific parameter at the node doing
           the replication.  PRF can be implemented by an
           edge node, a relay node, or an end system";
      }
      enum elimination {
        description
          "A Packet Elimination Function (PEF) eliminates
           duplicate copies of packets to prevent excess
           packets flooding the network or duplicate
           packets being sent out of the DetNet domain.
           PEF can be implemented by an edge node, a relay
           node, or an end system.";
      }
      enum ordering {
        description
          "A Packet Ordering Function (POF) re-orders
           packets within a DetNet flow that are received
           out of order.  This function can be implemented
           by an edge node, a relay node, or an end system.";
      }
      enum elimination-ordering {
        description
          "A combination of PEF and POF that can be
           implemented by an edge node, a relay node, or
           an end system.";
      }
      enum elimination-replication {
        description
          "A combination of PEF and PRF that can be
           implemented by an edge node, a relay node, or
           an end system";
      }
      enum elimination-ordering-replicaiton {
        description
          "A combination of PEF, POF and PRF that can be
           implemented by an edge node, a relay node, or
           an end system";
      }
    }
  }
 
  typedef sequence-number-generation-type {
    type enumeration {
      enum copy-from-app-flow {
        description
          "Copy the app-flow sequence number to the DetNet-flow";
      }
      enum generate-by-detnet-flow {
        description
          "Generate the sequence number by DetNet flow";
      }
    }
  }
 
  typedef sequence-number-field {
    type enumeration {
      enum zero-sn {
        description
          "there is no DetNet sequence number field.";
<RR10> “There is..”
<Done>
      }
      enum short-sn {
        value 16;
        description 
          "there is 16bit DetNet sequence number field";
<RR11> “There is a 16-bit”
<Done>
      }
      enum long-sn {
        value 28;
        description
          "there is 28bit DetNet sequence number field";
<RR12> “There is a 28-bit”
<Done>
      }
    }
  }
 
  typedef aggregation-group {
    type string;
    description
      "The name of the aggregation group";
  }
 
  grouping ip-header {
    description
      "The IPv4/IPv6 packet header information";
    leaf src-ip-address {
      type inet:ip-address;
      description
        "The source IP address of the header";
<RR13> In this grouping, is “of the header” ok or should it be “in the header”?
<Done>
    }
 
    leaf dest-ip-address {
      type inet:ip-address;
      description
        "The destination IP address of the header";
    }
 
    leaf next-header {
      type uint8;
      description
        "The next header of the IPv6 header";
<RR14> For IPv4 it’s the “protocol” field. Could do union but since protocol is also 8 bits, a common field for IPv4 and IPv6 should be fine.
<Done>
    }
 
    leaf traffic-class {
      type uint8;
      description
        "The traffic class value of the header";
<RR15> Add reference. Should that be type “dscp” or is this something else?'
<Done>
    }
 
    leaf flow-label {
      type inet:ipv6-flow-label;
      description
        "The flow label value of the header";
<RR16> Mention only if header is IPv6?
<Done>
    }
 
    leaf source-port {
      type inet:port-number;
      description
        "The source port number";
    }
 
    leaf destination-port {
      type inet:port-number;
      description
        "The destination port number";
    }
  }
 
  grouping l2-header {
    description
      "The Ethernet or TSN packet header information";
    leaf source-mac-address {
      type yang:mac-address;
      description
        "The source MAC address value of the ethernet header";
    }
 
    leaf destination-mac-address {
      type yang:mac-address;
      description
        "The destination MAC address value of the ethernet header";
    }
 
    leaf ethertype {
      type eth:ethertype;
      description
        "The ethernet packet type value of the ethernet header";
    }
 
    leaf vlan-id {
<RR17> I believe it’s ok to use valid from ieee802-dot1q-types
<Done>
      type uint16;
      description
        "The Vlan value of the ethernet header";
    }
 
    leaf pcp {
      type uint8;
      description
        "The priority value of the ethernet header";
    }
  }
 
  grouping destination-ip-port-identification {
    description
      "The TCP/UDP port(source/destination) identification information";
    container destination-port {
      uses packet-fields:port-range-or-operator;
    }
  }
 
  grouping source-ip-port-identification {
    description
      "The TCP/UDP port(source/destination) identification information";
    container source-port {
      uses packet-fields:port-range-or-operator;
    }
  }
 
  grouping ip-flow-identification {
    description
      "The IPv4/IPv6 packet header identification information";
    leaf src-ip-prefix {
      type inet:ip-prefix;
      description
        "The source IP address of the header";
<RR18> Not a header and not an address.
<Done>
    }
 
    leaf dest-ip-prefix {
      type inet:ip-prefix;
      description
        "The destination IP address of the header";
<RR19> Not a header and not an address.
<Done>
    }
 
    leaf next-header {
      type uint8;
      description
        "The next header of the IPv6 header";
<RR20> Not a header. And same comment as above for IPv4 protocol.
<Done>
    }
 
    leaf traffic-class {
      type uint8;
      description
        "The traffic class value of the header";
<RR21> Same comment as above wrt type “dscp”?
<Done>
    }
 
    leaf flow-label {
      type inet:ipv6-flow-label;
      description
        "The flow label value of the header";
    }
 
    uses source-ip-port-identification;
 
    uses destination-ip-port-identification;
 
    leaf ipsec-spi {
      type ipsec-spi;
      description
        "Security parameter index of SA entry";
<RR22> Reference
<Done>
    }
  }
 
  grouping mpls-flow-identification {
    description
      "The MPLS packet header identification information";
    choice label-space {
      description
        "";
      case context-label-space {
        uses rt-types:mpls-label-stack;
      }
 
      case platform-label-space {
        leaf label {
          type rt-types:mpls-label;
        }
      }
    }
  }
 
  grouping traffic-specification {
    container traffic-specification {
      description
        "traffic-specification specifies how the Source
         transmits packets for the flow.  This is the
         promise/request of the Source to the network.
         The network uses this traffic specification
         to allocate resources and adjust queue
         parameters in network nodes.";
      reference
        "draft-ietf-detnet-flow-information-model";
      leaf interval {
        type uint32;
<RR23> Add unit for all time intervals and latencies.
<Done>
        description
          "The period of time in which the traffic
           specification cannot be exceeded";
      }
 
      leaf max-packets-per-interval {
        type uint32;
        description
          "The maximum number of packets that the
           source will transmit in one Interval.";
<RR24> interval
<Done>
      }
 
      leaf max-payload-size {
        type uint32;
        description
          "The maximum payload size that the source
           will transmit.";
      }
 
      leaf average-packets-per-interval {
        type uint32;
        description
          "The average number of packets that the
           source will transmit in one Interval";
<RR25> interval
<Done>
      }
 
      leaf average-payload-size {
        type uint32;
        description
          "The average payload size that the
           source will transmit.";
      }
    }
  }
 
  grouping traffic-requirements {
    container traffic-requirements {
      description
        "FlowRequirements: defines the attributes of the App-flow
         regarding bandwidth, latency, latency variation, loss, and
         misordering tolerance.";
      leaf min-bandwidth {
        type uint64;
<RR26> Can we use a unit saying Bps (Bytes per second) or would that be too confusing? Alternative is to use bits per second (bps). Whichever way I think it’d be good to have a unit here (and for all bandwidth nodes). 
<Done>
        description
          "MinBandwidth is the minimum bandwidth that has to be
           guaranteed for the DetNet service.  MinBandwidth is
           specified in octets per second.";
      }
 
      leaf max-latency {
        type uint32;
        description
          "MaxLatency is the maximum latency from Ingress to Egress(es)
           for a single packet of the DetNet flow.  MaxLatency is
           specified as an integer number of nanoseconds";
      }
 
      leaf max-latency-variation {
        type uint32;
        description
          "MaxLatencyVariation is the difference between the minimum and
           the maximum end-to-end one-way latency.  MaxLatencyVariation
           is specified as an integer number of nanoseconds.";
      }
 
      leaf max-loss {
        type uint8;
<RR27> Is unit8 really the type needed for this?
<Done>
        description
          "MaxLoss defines the maximum Packet Loss Ratio (PLR) parameter
           for the DetNet service between the Ingress and Egress(es) of
           the DetNet domain.";
      }
 
      leaf max-consecutive-loss-tolerance {
        type uint32;
<RR28> uint32 for this seems overkill but there could be usecases. Same comment for max-misordering.
<Discuss>
        description
          "Some applications have special loss requirement, such as
           MaxConsecutiveLossTolerance.  The maximum consecutive loss
           tolerance parameter describes the maximum number of
           consecutive packets whose loss can be tolerated.  The maximum
           consecutive loss tolerance can be measured for example based
           on sequence number";
      }
 
      leaf max-misordering {
        type uint32;
        description
          "MaxMisordering describes the tolerable maximum number of
           packets that can be received out of order.  The maximum
           allowed misordering can be measured for example based on
           sequence number.  The value zero for the maximum allowed
           misordering indicates that in order delivery is required,
           misordering cannot be tolerated.";
      }
    }
  }
 
  grouping data-flow-spec {
    description
      "app-flow identification";
    choice data-flow-type {
      case tsn-app-flow {
        uses l2-header;
      }
 
      case ip-app-flow {
        uses ip-flow-identification;
      }
 
      case mpls-app-flow {
        uses mpls-flow-identification;
      }
    }
  }
 
  grouping detnet-flow-spec {
    description 
      "detnet-flow identification";
    choice detnet-flow-type {
      case ip-detnet-flow {
        uses ip-flow-identification;
      }
 
      case mpls-detnet-flow {
        uses mpls-flow-identification;
      }
    }
  }
 
  grouping app-flows-ref {
    description
      "incoming or outgoing app-flow reference group";
    leaf-list app-flow {
      type app-flow-ref;
      description
        "List of ingress or egress app-flows";
    }
  }
 
  grouping service-sub-layer-ref {
    description
      "incoming or outgoing service sub-layer reference group";
    leaf-list service-sub-layer {
      type service-sub-layer-ref;
      description
        "List of incoming or outgoing service sub-layer
<RR29> sub-layers
<Done>
         that has to aggregate or disaggregate";
<RR30> that have. Ditto below.
<Done>
    }
  }
 
  grouping forwarding-sub-layer-ref {
    description
      "incoming or outgoing forwarding sub-layer reference group";
    leaf-list forwarding-sub-layer {
      type forwarding-sub-layer-ref;
      description
        "List of incoming or outgoing forwarding sub-layer
         that has to aggregate or disaggregate";
    }
  }
 
  grouping detnet-header {
    description
      "DetNet header info for DetNet encapsulation or swap";
    choice header-type {
      case detnet-mpls-header {
        description
          "MPLS label stack for DetNet MPLS encapsulation or forwarding";
        uses rt-types:mpls-label-stack;
      }
 
      case detnet-ip-header {
        description
          "IPv4/IPv6 packet header for DetNet IP encapsulation";
        uses ip-header;
      }
    }
  }
 
  grouping detnet-app-next-hop-content {
    description
      "Generic parameters of DetNet next hops.";
    choice next-hop-options {
      mandatory true;
      description
        "Options for next hops.
         It is expected that further cases will be added through
         augments from other modules, e.g., for recursive
         next hops.";
      case simple-next-hop {
        description
          "This case represents a simple next hop consisting of the
           next-hop address and/or outgoing interface.
           Modules for address families MUST augment this case with a
           leaf containing a next-hop address of that address
           family.";
        leaf outgoing-interface {
          type if:interface-ref;
        }
 
        choice flow-type {
          case ip {
            leaf next-hop-address {
              type inet:ip-address;
            }
          }
 
          case mpls {
            uses rt-types:mpls-label-stack;
          }
        }
      }
 
      case next-hop-list {
        container next-hop-list {
          description
            "Container for multiple next hops.";
          list next-hop {
            key "hop-index";
            description
              "An entry in a next-hop list.
               Modules for address families MUST augment this list
               with a leaf containing a next-hop address of that
               address family.";
            leaf hop-index {
              type uint8;
<RR31> 255 seems like a lot but probably best to have a bigger supported range
<Done>
              description
                "";
<RR32> Add description
<Done>
            }
 
            leaf outgoing-interface {
              type if:interface-ref;
            }
 
            choice flow-type {
              case ip {
                leaf next-hop-address {
                  type inet:ip-address;
                }
              }
 
              case mpls {
                uses rt-types:mpls-label-stack;
              }
            }
          }
        }
      }
    }
  }
 
  grouping detnet-forwarding-next-hop-content {
    description
      "Generic parameters of DetNet next hops.";
    choice next-hop-options {
      mandatory true;
      description
        "Options for next hops.
         It is expected that further cases will be added through
         augments from other modules, e.g., for recursive
         next hops.";
      case simple-next-hop {
        description
          "This case represents a simple next hop consisting of the
           next-hop address and/or outgoing interface.
           Modules for address families MUST augment this case with a
           leaf containing a next-hop address of that address
           family.";
        leaf outgoing-interface {
          type if:interface-ref;
        }
<RR33> Isn’t this a repetition of what’s above for detnet-app-next-hop-content? If yes, could use a common grouping?
<Discuss>
        choice flow-type {
          case ip {
            choice operation-type {
              case ip-forwarding {
                leaf next-hop-address {
                  type inet:ip-address;
                }
              }
 
              case mpls-over-ip-encapsulation {
                uses ip-header;
              }
            }
          }
 
          case mpls {
            uses rt-types:mpls-label-stack;
          }
        }
      }
 
      case next-hop-list {
        container next-hop-list {
          description
            "Container for multiple next hops.";
          list next-hop {
            key "hop-index";
            description
              "An entry in a next-hop list.
 
               Modules for address families MUST augment this list
               with a leaf containing a next-hop address of that
               address family.";
            leaf hop-index {
              type uint8;
              description
                "";
            }
 
            leaf outgoing-interface {
              type if:interface-ref;
            }
 
            choice flow-type {
              case ip {
                choice operation-type {
                  case ip-forwarding {
                    leaf next-hop-address {
                      type inet:ip-address;
                    }
                  }
 
                  case mpls-over-ip-encapsulation {
                    uses ip-header;
                  }
                }
              }
 
              case mpls {
                uses rt-types:mpls-label-stack;
              }
            }
          }
        }
      }
    }
  }
 
  container detnet {
    list traffic-profile {
      key "profile-number";
      description
        "A traffic profile";
      leaf profile-number {
        type uint16;
<RR34> As per comment given earlier, this should probably be a string (name) instead.
<Done>
        description
          "An Aggregation group ID. Zero means the service is not
           part of a group";
      }
 
      uses traffic-requirements;
 
      uses traffic-specification;

<RR35> The 2 groupings above are used only here. Some reviewers may frown on that.
<Done>
 
      leaf-list member-applications {
        type app-flow-ref;
        config false;
        description
          "Applicaions attached to this profile";
<RR36> Applications
<Done>
      }
 
      leaf-list member-services {
        type service-sub-layer-ref;
        config false;
        description
          "Services attached to this profile";
      }
 
      leaf-list member-forwarding-sublayers {
        type forwarding-sub-layer-ref;
        config false;
        description
          "Forwarding sub-layer attached to this profile";
      }
    }
 
    container app-flows {
      description
        "The DetNet app-flow configuration";
      list app-flow {
        key "name";
        description
          "";
<RR37> Empty description
<Done>
        leaf name {
          type "string";
          description
            "The name to identify the DetNet app-flow";
        }
 
        leaf app-flow-bidir-congruent {
          type boolean;
          description
            "Defines the data path requirement of the App-flow whether
             it must share the same data path and physical path
             for both directions through the network,
             e.g., to provide congruent paths in the two directions.";
        }
 
        leaf outgoing-service {
          type service-sub-layer-ref;
          config false;
          description
            "Binding to this applications outgoing
             service";
        }
 
        leaf incoming-service {
          type service-sub-layer-ref;
          config false;
          description
            "Binding to this applications incoming
             service";
        }
 
        leaf traffic-profile {
          type traffic-profile-ref;
          description
            "The Traffic Profile for this group";
        }
 
        container ingress {
          // key "name";  This should be a list for aggregation
          description
            "Ingress DetNet application flows or a compound flow";
          leaf name {
            type string;
            description
              "Ingress DetNet application";
          }
 
          leaf app-flow-status {
            type identityref {
              base status;
            }
            config false;
            description
              "Status of ingress application flow";
          }
 
          leaf interface {
            type if:interface-ref;
          }
 
          uses data-flow-spec;
        } //End of app-ingress
 
        container egress {
          description
            "Route's next-hop attribute.";
          // key "name";  This should be a list for aggregation
          leaf name {
            type string;
            description
              "Egress DetNet application";
          }
 
          choice application-type {
            container ethernet {
              leaf ethernet-place-holder {
                type string;
                description
                  "Place holder for matching ethernet";
              }
            }
 
            container ip-mpls {
              uses detnet-app-next-hop-content;
            }
          }
        }
      }
    }
 
    container service-sub-layer {
      description
        "The DetNet service sub-layer configuration";
      list service-sub-layer-list {
        key "name";
        description
          "";
<RR38> Empty
<Done>
        leaf name {
          type string;
          description
            "The name of the DetNet service sub-layer";
        }
 
        leaf service-rank {
          type uint8;
          description
            "The DetNet rank for this service";
<RR39> Reference
<Done>
        }
 
        leaf traffic-profile {
          type traffic-profile-ref;
          description
            "The Traffic Profile for this service";
        }
 
        container service-protection {
          leaf service-protection-type {
            type service-protection-type;
            description
              "The DetNet service protection type such as PRF, PEF,
               PEOF,PERF, and PEORF";
<RR40> Reference
<Done>
          }
 
          leaf sequence-number-length {
            type sequence-number-field;
            description
              "Sequence number field can choice 0 bit, 16bit, 28 bit
               filed";
<RR41> "Sequence number field can be of length 0 (one), 16 bits or 28 bits”;
<Done>

          }
        }
 
        leaf service-operation-type {
          type service-operation-type;
        }
 
        container incoming {
          description
            "The DetNet service sub-layer incoming configuration.";
          choice incoming-options {
            mandatory true;
            description
              "";
            case ingress-application {
              uses app-flows-ref;
            }
 
            case detnet-service-identification {
              uses detnet-flow-spec;
            }
 
            case aggregated-service {
              uses service-sub-layer-ref;
            }
 
            case aggregated-forwarding {
              uses forwarding-sub-layer-ref;
            }
          }
        }
 
        container outgoing {
          description
            "The DetNet service sub-layer outgoing configuration.";
          choice outgoing-options {
            mandatory true;
            description
              "";
            case detnet-service-outgoing {
              //uses detnet-service-next-hop-content;
              list service-outgoing-list {
                key "service-outgoing-index";
                leaf service-outgoing-index {
                  type uint8;
                }
 
                uses detnet-header;
 
                list next-layer {
                  key "index";
                  description
                    "lower-layer info";
                  leaf index {
                    type uint8;
                  }
 
                  leaf forwarding-sub-layer {
                    type forwarding-sub-layer-ref;
                  }
                }
              }
            }
 
            case detnet-service-aggregation {
              leaf aggregation-service-sub-layer {
                type service-sub-layer-ref;
              }
 
              container service-label {
                uses rt-types:mpls-label-stack;
              }
            }
 
            case egress-proxy {
              uses app-flows-ref;
            }
 
            case detnet-service-operation {
              uses service-sub-layer-ref;
            }
 
            case detnet-forwarding-operation {
              uses forwarding-sub-layer-ref;
            }
          }
        }
      }
    }
 
    container forwarding-sub-layer {
      description
        "The DetNet forwarding sub-layer configuration";
      list forwarding-sub-layer-list {
        key "name";
        description
          "";
        leaf name {
          type string;
          description
            "The name of the DetNet forwarding sub-layer";
        }
 
        leaf traffic-profile {
          type traffic-profile-ref;
          description
            "The Traffic Profile for this group";
        }
 
        leaf forwarding-operation-type {
          type forwarding-operations-type;
        }
 
        container incoming {
          description
            "The DetNet forwarding sub-layer incoming configuration.";
          choice incoming-options {
            mandatory true;
            description
              "";
            case detnet-service-forwarding {
              leaf-list service-sub-layer {
                type service-sub-layer-ref;
                config false;
                description
                  "";
              }
            }
 
            case detnet-forwarding-identification {
              leaf interface {
                type if:interface-ref;
                description
                  "";
              }
 
              uses detnet-flow-spec;
            }
 
            case aggregated-forwarding {
              uses forwarding-sub-layer-ref;
            }
          }
        }
 
        container outgoing {
          description
            "The DetNet forwarding sub-layer outbound configuration.";
          choice outgoing-options {
            mandatory true;
            description
              "";
            case detnet-forwarding-outgoing {
              uses detnet-forwarding-next-hop-content;
            }
 
            case detnet-service-aggregation {
              leaf aggregation-service-sub-layer {
                type service-sub-layer-ref;
              }
 
              container optional-forwarding-label {
                uses rt-types:mpls-label-stack;
              }
            }
 
            case detnet-forwarding-aggregation {
              leaf aggregation-forwarding-sub-layer {
                type forwarding-sub-layer-ref;
              }
 
              container forwarding-label {
                uses rt-types:mpls-label-stack;
              }
            }
 
            case detnet-service-operation {
              uses service-sub-layer-ref;
            }
 
            case detnet-forwarding-operation {
              uses forwarding-sub-layer-ref;
            }
          }
        }
      }
    }
  }
}

Regards,
Reshad.

